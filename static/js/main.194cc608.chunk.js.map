{"version":3,"sources":["api/apiConfig.ts","redux/actions/post.ts","redux/actions/write.ts","api/postApi.ts","components/common/Loader.tsx","components/detail/Detail.tsx","containers/detail/DetailContainer.tsx","pages/DetailPage.tsx","components/list/PostList.tsx","redux/actions/postList.ts","containers/list/PostListContainer.tsx","redux/actions/auth.ts","components/search/SearchSelect.tsx","components/search/Settings.tsx","containers/search/Search.tsx","pages/Home.tsx","containers/list/SearchListContainer.tsx","pages/ListPage.tsx","components/auth/Login.tsx","containers/auth/LoginContainer.tsx","pages/LoginPage.tsx","components/write/Write.tsx","containers/write/WriteContainer.tsx","pages/WritePage.tsx","App.tsx","redux/reducers/postList.ts","lib/loading.ts","redux/reducers/post.ts","redux/reducers/write.ts","redux/reducers/auth.ts","redux/reducers/index.ts","lib/createRequestSaga.ts","api/authApi.ts","redux/sagas/auth.ts","redux/sagas/post.ts","redux/sagas/postList.ts","redux/sagas/write.ts","redux/sagas/index.ts","store/storeConfig.ts","index.tsx"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","authService","dbService","storageService","readPost","createAction","postId","WRITE_POST","changeField","key","value","changeSelect","changeDate","changeFile","writePost","imgUrl","title","category","manager","date","year","month","getDonwloadUrl","setCurrentPost","post","updatePost","currentPostId","a","collection","doc","get","response","resData","id","data","deletePost","delete","getListPost","orderBy","then","postList","docs","map","selectSearchListPost","where","writeWork","add","updateWork","update","storageWork","attachmentRef","ref","child","uuidv4","putString","getDownloadURL","attachmentUrl","Loader","style","position","top","left","right","bottom","display","alignItems","justifyContent","size","Detail","loading","onRemove","error","goEdit","goHome","useState","visibileModal","setVisibileModal","justify","xs","lg","onBack","layout","bordered","column","Item","label","textAlign","maxWidth","margin","src","alt","Text","categoryTranslate","marginTop","marginBottom","onClick","danger","marginLeft","visible","onOk","onCancel","withRouter","match","history","useHistory","params","dispatch","useDispatch","useSelector","state","goBack","useCallback","console","log","push","useEffect","DetailPage","PostList","active","dataSource","itemLayout","pagination","onChange","page","pageSize","renderItem","item","extra","width","Meta","to","description","POST_LIST","getPostList","selectSearch","PostListContainer","LOGIN","login","email","password","logout","fetchUser","user","SearchSelect","onSelectSearch","name","defaultValue","Settings","onLogout","goLogin","goWrite","trigger","overlay","shape","icon","SettingOutlined","Search","auth","e","target","padding","Title","Home","SearchListContainer","searchList","ListPage","Login","onLogin","align","onFinish","initialValues","remember","rules","required","message","autoFocus","prefix","MailOutlined","placeholder","LockOutlined","type","htmlType","LoginContainer","authError","localStorage","setItem","JSON","stringify","LoginPage","Post","write","previewImg","onSubmit","onChangeField","onSelect","onDateChange","onFileChange","Option","Select","accept","picker","locale","WriteContainer","window","alert","files","dataUrl","file","fileReader","FileReader","onloadend","finishedEvent","result","readAsDataURL","Write","WritePage","App","onAuthStateChanged","component","path","exact","handleActions","payload","startLoading","requestType","finishLoading","initialState","substring","postError","getUrlError","uid","rootReducer","combineReducers","createRequestSaga","request","SUCCESS","FAILURE","action","put","call","signInWithEmailAndPassword","signOut","logoutSaga","authSaga","loginSaga","authAPI","removeItem","takeLatest","postSaga","readPostSaga","postAPI","postListSaga","getPostListSaga","selectSearchSaga","writeSaga","writeWorkSaga","getDownloadUrlSaga","updateWorkSaga","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadAuth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.194cc608.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import { createAction } from 'redux-actions';\n\nexport const READ_POST = 'READ_POST';\nexport const READ_POST_SUCCESS = 'READ_POST_SUCCESS';\nexport const READ_POST_FAILURE = 'READ_POST_FAILURE';\nexport const RESET_POST = 'RESET_POST';\n\nexport const readPost = createAction(READ_POST, (postId: string) => postId);\nexport const resetPost = createAction(RESET_POST);\n","import { createAction } from 'redux-actions';\nimport { ChangeFieldType, MokupReqType } from '../types/write';\n\nexport const CHANGE_FIELD = 'write/CHANGE_FIELD';\nexport const CHANGE_SELECT = 'write/CHANGE_SELECT';\nexport const CHANGE_DATE = 'write/CHANGE_DATE';\nexport const CHANGE_FILE = 'write/CHANGE_FILE';\n\nexport const WRITE_POST = 'write/WRITE_POST';\nexport const WRITE_POST_SUCCESS = 'write/WRITE_POST_SUCCESS';\nexport const WRITE_POST_FAILURE = 'write/WRITE_POST_FAILURE';\n\nexport const GET_DOWNLOAD_URL = 'write/GET_DOWNLOAD_URL';\nexport const GET_DOWNLOAD_URL_SUCCESS = 'write/GET_DOWNLOAD_URL_SUCCESS';\nexport const GET_DOWNLOAD_URL_FAILURE = 'write/GET_DOWNLOAD_URL_FAILURE';\n\nexport const SET_CURRENT_POST = 'write/SET_CURRENT_POST';\n\nexport const UPDATE_POST = 'write/UPDATE_POST';\nexport const UPDATE_POST_SUCCESS = 'write/UPDATE_POST_SUCCESS';\nexport const UPDATE_POST_FAILURE = 'write/UPDATE_POST_FAILURE';\n\nexport const FORM_INIT = 'write/FORM_INIT';\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ key, value }: ChangeFieldType) => ({\n    key,\n    value,\n  })\n);\n\nexport const changeSelect = createAction(CHANGE_SELECT, (value: any) => ({\n  value,\n}));\n\nexport const changeDate = createAction(CHANGE_DATE, (value: any) => ({\n  value,\n}));\nexport const changeFile = createAction(CHANGE_FILE, (value: any) => ({\n  value,\n}));\nexport const writePost = createAction(\n  WRITE_POST,\n  ({ imgUrl, title, category, manager, date, year, month }: MokupReqType) => ({\n    imgUrl,\n    title,\n    category,\n    manager,\n    date,\n    year,\n    month,\n  })\n);\nexport const getDonwloadUrl = createAction(\n  GET_DOWNLOAD_URL,\n  (value: any) => value\n);\n\nexport const setCurrentPost = createAction(\n  SET_CURRENT_POST,\n  (post: any) => post\n);\n\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({\n    currentPostId,\n    imgUrl,\n    title,\n    category,\n    manager,\n    date,\n    year,\n    month,\n  }: MokupReqType) => ({\n    currentPostId,\n    imgUrl,\n    title,\n    category,\n    manager,\n    date,\n    year,\n    month,\n  })\n);\n\nexport const formInit = createAction(FORM_INIT);\n","import { MokupReqType } from '../redux/types/write';\nimport { dbService, storageService } from './apiConfig';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const readPost = async (postId: string) => {\n  const response = await dbService.collection('works').doc(`${postId}`).get();\n  const resData = {\n    id: postId,\n    ...response.data(),\n  };\n  return resData;\n};\n\nexport const deletePost = async (postId: string) => {\n  await dbService.collection('works').doc(`${postId}`).delete();\n};\n\nexport const getListPost = async () => {\n  const response = await dbService\n    .collection('works')\n    .orderBy('date', 'desc')\n    .get()\n    .then((doc) => {\n      return doc;\n    });\n  const postList = response.docs.map((doc) => {\n    return {\n      id: doc.id,\n      ...doc.data(),\n    };\n  });\n\n  return postList;\n};\n\nexport const selectSearchListPost = async ({ year, category }: any) => {\n  if (year === '' && category === '') {\n    const response = await dbService\n      .collection('works')\n      .orderBy('date', 'desc')\n      .get()\n      .then((doc) => {\n        return doc;\n      });\n    const postList = response.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data(),\n      };\n    });\n    return postList;\n  } else if (year !== '' && category !== '') {\n    const response = await dbService\n      .collection('works')\n      .where('year', '==', `${year}`)\n      .where('category', '==', `${category}`)\n      .get()\n      .then((doc) => {\n        return doc;\n      });\n    const postList = response.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data(),\n      };\n    });\n\n    return postList;\n  } else if (year !== '' && category === '') {\n    const response = await dbService\n      .collection('works')\n      .where('year', '==', `${year}`)\n      .get()\n      .then((doc) => {\n        return doc;\n      });\n    const postList = response.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data(),\n      };\n    });\n    return postList;\n  } else if (year === '' && category !== '') {\n    const response = await dbService\n      .collection('works')\n      .where('category', '==', `${category}`)\n      .get()\n      .then((doc) => {\n        return doc;\n      });\n    const postList = response.docs.map((doc) => {\n      return {\n        id: doc.id,\n        ...doc.data(),\n      };\n    });\n\n    return postList;\n  }\n};\n\nexport const writeWork = async ({\n  title,\n  imgUrl,\n  category,\n  manager,\n  date,\n  year,\n  month,\n}: MokupReqType) => {\n  const response = await dbService\n    .collection('works')\n    .add({ title, imgUrl, category, manager, date, year, month });\n  return await response.get();\n};\n\nexport const updateWork = async ({\n  currentPostId,\n  title,\n  imgUrl,\n  category,\n  manager,\n  date,\n  year,\n  month,\n}: MokupReqType) => {\n  const response = await dbService\n    .doc(`works/${currentPostId}`)\n    .update({ title, imgUrl, category, manager, date, year, month });\n  return response;\n};\n\nexport const storageWork = async (value: string) => {\n  let attachmentUrl;\n  if (value !== '') {\n    const attachmentRef = storageService.ref().child(`${uuidv4()}`);\n    const response = await attachmentRef.putString(value, 'data_url');\n    attachmentUrl = await response.ref.getDownloadURL();\n\n    return attachmentUrl;\n  }\n};\n","import { Spin } from 'antd';\nimport React from 'react';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n      }}>\n      <Spin size=\"large\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Col,\n  Descriptions,\n  PageHeader,\n  Row,\n  Space,\n  Typography,\n} from 'antd';\nimport Modal from 'antd/lib/modal/Modal';\nimport { MokupReqType } from '../../redux/types/write';\nimport Loader from '../common/Loader';\n\ntype DetailProps = {\n  goHome: () => void;\n  goBack: () => void;\n  onRemove: () => void;\n  goEdit: () => void;\n  post: MokupReqType | null;\n  loading: boolean;\n  error: Error | null;\n};\n\nconst Detail = ({\n  post,\n  loading,\n  error,\n  onRemove,\n  goEdit,\n  goHome,\n}: DetailProps) => {\n  const [visibileModal, setVisibileModal] = useState(false);\n  const onShowModal = () => {\n    setVisibileModal(true);\n  };\n  const onHideModal = () => {\n    setVisibileModal(false);\n  };\n\n  const categoryTranslate = (category: string) => {\n    switch (category) {\n      case 'brochure':\n        return '브로셔';\n      case 'catalogue':\n        return '카달로그';\n      case 'leaflet':\n        return '리플렛';\n      case 'etc':\n        return '기타';\n      default:\n        break;\n    }\n  };\n  if (loading) return <Loader />;\n  if (!post) return null;\n  return (\n    <>\n      <Row justify=\"center\">\n        <Col xs={24} lg={14}>\n          <PageHeader onBack={goHome} title={<Space>목업 상세</Space>} />\n          <Descriptions layout=\"vertical\" bordered column={1}>\n            <Descriptions.Item label={post.title}>\n              <figure\n                style={{\n                  textAlign: 'center',\n                  maxWidth: '400px',\n                  margin: '0 auto',\n                }}>\n                <img src={post.imgUrl} alt=\"\" style={{ maxWidth: '100%' }} />\n              </figure>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"시안 종류\">\n              <Typography.Text>\n                {categoryTranslate(post.category)}\n              </Typography.Text>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"작업자\">\n              <Typography.Text>{post.manager}</Typography.Text>\n            </Descriptions.Item>\n            <Descriptions.Item label=\"작업 날짜\">\n              <Typography.Text>{post.date}</Typography.Text>\n            </Descriptions.Item>\n          </Descriptions>\n        </Col>\n      </Row>\n      <Row justify=\"center\" style={{ marginTop: '1rem' }}>\n        <Col\n          xs={24}\n          lg={14}\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            marginBottom: 30,\n          }}>\n          <Button onClick={goEdit}>수정</Button>\n          <Button danger style={{ marginLeft: '0.5rem' }} onClick={onShowModal}>\n            삭제\n          </Button>\n        </Col>\n      </Row>\n\n      <Modal\n        title=\"작업물 삭제\"\n        visible={visibileModal}\n        onOk={onRemove}\n        onCancel={onHideModal}>\n        <p>정말 삭제하시겠습니까?</p>\n      </Modal>\n    </>\n  );\n};\n\nexport default Detail;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, withRouter } from 'react-router-dom';\nimport { readPost } from '../../redux/actions/post';\nimport { setCurrentPost } from '../../redux/actions/write';\nimport { deletePost } from '../../api/postApi';\nimport Detail from '../../components/detail/Detail';\nimport { RootState } from '../../redux/reducers';\n\nconst DetailContainer = ({ match }: any) => {\n  const history = useHistory();\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error } = useSelector((state: RootState) => state.post);\n  const { loading } = useSelector((state: RootState) => state.loading);\n  const goBack = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const onRemove = useCallback(async () => {\n    try {\n      await deletePost(postId);\n      console.log('삭제되었습니다.');\n    } catch (error) {\n      console.log(error);\n    }\n    history.push('/');\n  }, [postId, history]);\n\n  const goEdit = useCallback(() => {\n    dispatch(setCurrentPost(post));\n    history.push('/write');\n  }, [post, history, dispatch]);\n\n  const goHome = useCallback(() => {\n    history.push('/');\n  }, [history]);\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n  }, [dispatch, postId]);\n\n  return (\n    <Detail\n      post={post}\n      error={error}\n      loading={loading}\n      goBack={goBack}\n      onRemove={onRemove}\n      goEdit={goEdit}\n      goHome={goHome}\n    />\n  );\n};\n\nexport default withRouter(DetailContainer);\n","import React from 'react';\nimport DetailContainer from '../containers/detail/DetailContainer';\n\nconst DetailPage = () => {\n  return <DetailContainer />;\n};\n\nexport default DetailPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Col, List, Row, Skeleton } from 'antd';\n\ntype PostListProps = {\n  loading: Boolean;\n  postList: any;\n  error: Error | null;\n};\n\nconst PostList = ({ postList, error, loading }: PostListProps) => {\n  if (loading) {\n    return (\n      <Row justify=\"center\" style={{ marginTop: '2rem' }}>\n        <Col xs={24} lg={18}>\n          <Skeleton active />\n          <Skeleton active />\n          <Skeleton active />\n        </Col>\n      </Row>\n    );\n  }\n  if (!postList || error) return null;\n  return (\n    <>\n      <Row justify=\"center\" style={{ marginTop: '2rem', marginBottom: '2rem' }}>\n        <Col xs={24} lg={18}>\n          <List\n            dataSource={postList}\n            itemLayout=\"vertical\"\n            size=\"large\"\n            pagination={{\n              onChange: (page) => {},\n              pageSize: 5,\n              style: { textAlign: 'center' },\n            }}\n            renderItem={(item: any) => (\n              <List.Item\n                key={item.id}\n                extra={<img width={'50'} alt=\"logo\" src={item.imgUrl} />}>\n                <List.Item.Meta\n                  title={<Link to={`/detail/${item.id}`}>{item.title}</Link>}\n                  description={item.year}\n                />\n              </List.Item>\n            )}\n          />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default PostList;\n","import { createAction } from 'redux-actions';\n\nexport const POST_LIST = 'postList/POST_LIST';\nexport const POST_LIST_SUCCESS = 'postList/POST_LIST_SUCCESS';\nexport const POST_LIST_FAILURE = 'postList/POST_LIST_FAILURE';\n\nexport const CHANGE_SELECT = 'postList/CHANGE_SELECT';\nexport const SELECT_SEARCH = 'postList/SELECT_SEARCH';\nexport const SELECT_SEARCH_SUCCESS = 'postList/SELECT_SEARCH_SUCCESS';\nexport const SELECT_SEARCH_FAILURE = 'postList/SELECT_SEARCH_FAILURE';\n\nexport const getPostList = createAction(POST_LIST);\nexport const changeSelect = createAction(\n  CHANGE_SELECT,\n  ({ key, value }: any) => ({\n    key,\n    value,\n  })\n);\n\nexport const selectSearch = createAction(\n  SELECT_SEARCH,\n  (year: any, category: any) => ({\n    year,\n    category,\n  })\n);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/list/PostList';\nimport { RootState } from '../../redux/reducers';\nimport { getPostList } from '../../redux/actions/postList';\n\nconst PostListContainer = () => {\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state: RootState) => state.loading);\n  const { postList, error } = useSelector((state: RootState) => state.postList);\n\n  useEffect(() => {\n    dispatch(getPostList());\n  }, [dispatch]);\n\n  return <PostList postList={postList} error={error} loading={loading} />;\n};\n\nexport default PostListContainer;\n","import { createAction } from 'redux-actions';\nimport { AuthType } from '../types/auth';\nimport { ChangeFieldType } from '../types/write';\n\nexport const CHANGE_FIELD = 'auth/CHANGE_FIELD';\nexport const LOGIN = 'auth/LOGIN';\nexport const LOGIN_SUCCESS = 'auth/LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'auth/LOGIN_FAILURE';\nexport const LOGOUT = 'auth/LOGOUT';\nexport const FETCH_USER = 'auth/FETCH_USER';\n\nexport const LOGIN_CHECK = 'auth/LOGIN_CHECK';\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ key, value }: ChangeFieldType) => ({\n    key,\n    value,\n  })\n);\nexport const login = createAction(LOGIN, ({ email, password }: AuthType) => ({\n  email,\n  password,\n}));\nexport const logout = createAction(LOGOUT);\nexport const fetchUser = createAction(FETCH_USER, (user: any) => user);\n","import React from 'react';\nimport { Button } from 'antd';\n\ntype SearchSelectProps = {\n  onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n  onSelectSearch: () => void;\n};\n\nconst SearchSelect = ({ onChange, onSelectSearch }: SearchSelectProps) => {\n  return (\n    <div style={{ display: 'flex' }}>\n      <select\n        name=\"year\"\n        style={{ width: '45%' }}\n        defaultValue=\"연도를 선택해주세요.\"\n        onChange={onChange}>\n        <option value=\"\">전체</option>\n        <option value=\"2020\">2020</option>\n        <option value=\"2019\">2019</option>\n        <option value=\"2018\">2018</option>\n        <option value=\"2017\">2017</option>\n      </select>\n      <select\n        name=\"category\"\n        style={{ width: '45%' }}\n        defaultValue=\"카테고리를 선택해주세요.\"\n        onChange={onChange}>\n        <option value=\"\">전체</option>\n        <option value=\"brochure\">브로셔</option>\n        <option value=\"catalogue\">카다로그</option>\n        <option value=\"leaflet\">리플렛</option>\n        <option value=\"etc\">기타</option>\n      </select>\n\n      <Button style={{ marginLeft: 'auto' }} onClick={onSelectSearch}>\n        검색\n      </Button>\n    </div>\n  );\n};\n\nexport default SearchSelect;\n","import { SettingOutlined } from '@ant-design/icons';\nimport { Button, Dropdown, Menu } from 'antd';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype SettingProps = {\n  goLogin: () => void;\n  onLogout: () => void;\n  goWrite: () => void;\n\n  user: any;\n};\n\nconst Settings = ({ user, goLogin, onLogout, goWrite }: SettingProps) => {\n  return (\n    <div>\n      <Dropdown\n        trigger={['click']}\n        overlay={\n          <Menu>\n            <Menu.Item>\n              <Link to=\"/write\">시안 등록</Link>\n            </Menu.Item>\n            {user ? (\n              <Menu.Item onClick={onLogout}>로그아웃</Menu.Item>\n            ) : (\n              <Menu.Item>\n                <Link to=\"/login\">로그인</Link>\n              </Menu.Item>\n            )}\n          </Menu>\n        }>\n        <Button shape=\"circle\" icon={<SettingOutlined />} />\n      </Dropdown>\n    </div>\n  );\n};\n\nexport default Settings;\n","import { Col, Row, Typography } from 'antd';\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useHistory } from 'react-router-dom';\nimport { logout } from '../../redux/actions/auth';\nimport SearchSelect from '../../components/search/SearchSelect';\nimport Settings from '../../components/search/Settings';\nimport { RootState } from '../../redux/reducers';\nimport { changeSelect, selectSearch } from '../../redux/actions/postList';\n\nconst Search = () => {\n  const dispatch = useDispatch();\n  const { user } = useSelector((state: RootState) => state.auth);\n  const { year, category } = useSelector((state: RootState) => state.postList);\n\n  const history = useHistory();\n  const goWrite = () => {\n    history.push('/write');\n  };\n  const goLogin = useCallback(() => {\n    history.push('/login');\n  }, [history]);\n  const onLogout = useCallback(() => {\n    dispatch(logout());\n    goLogin();\n  }, [dispatch, goLogin]);\n\n  const onSelectSearch = useCallback(() => {\n    dispatch(selectSearch(year, category));\n    history.push('/list');\n  }, [dispatch, year, category, history]);\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLSelectElement>) => {\n      const { name, value } = e.target;\n      console.log(name, value);\n      dispatch(\n        changeSelect({\n          key: name,\n          value,\n        })\n      );\n    },\n    [dispatch]\n  );\n  return (\n    <>\n      <Row justify=\"end\" style={{ padding: 20 }}>\n        <Col>\n          <Settings\n            goLogin={goLogin}\n            onLogout={onLogout}\n            goWrite={goWrite}\n            user={user}\n          />\n        </Col>\n      </Row>\n      <Row justify=\"center\" style={{ marginTop: 20 }}>\n        <Col>\n          <Typography.Title>\n            <Link to=\"/\">Find Mokup</Link>\n          </Typography.Title>\n        </Col>\n      </Row>\n      <Row justify=\"center\" style={{ marginTop: 50 }}>\n        <Col xs={20} lg={12}>\n          <SearchSelect onChange={onChange} onSelectSearch={onSelectSearch} />\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport PostListContainer from '../containers/list/PostListContainer';\nimport Search from '../containers/search/Search';\n\nconst Home = () => {\n  return (\n    <>\n      <Search />\n      <PostListContainer />\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PostList from '../../components/list/PostList';\nimport { RootState } from '../../redux/reducers';\n\nconst SearchListContainer = () => {\n  const { loading } = useSelector((state: RootState) => state.loading);\n  const { searchList, error } = useSelector(\n    (state: RootState) => state.postList\n  );\n\n  return <PostList postList={searchList} error={error} loading={loading} />;\n};\n\nexport default SearchListContainer;\n","import React from 'react';\n\nimport SearchListContainer from '../containers/list/SearchListContainer';\nimport Search from '../containers/search/Search';\n\nconst ListPage = () => {\n  return (\n    <>\n      <Search />\n      <SearchListContainer />\n    </>\n  );\n};\n\nexport default ListPage;\n","import { LockOutlined, MailOutlined } from '@ant-design/icons';\nimport { Button, Col, Form, Input, Row, Typography } from 'antd';\nimport React from 'react';\n\ntype LoginProps = {\n  loading: boolean;\n  onLogin: () => void;\n  onChange: ({ key, value }: any) => void;\n  authError: Error | null;\n};\n\nconst Login = ({ onLogin, onChange, loading }: LoginProps) => {\n  return (\n    <>\n      <Row justify=\"center\" align=\"middle\" style={{ marginTop: 100 }}>\n        <Col>\n          <Typography.Title>Find Mokup</Typography.Title>\n        </Col>\n      </Row>\n      <Row justify=\"center\">\n        <Col>\n          <Form\n            onFinish={onLogin}\n            initialValues={{ remember: true }}\n            style={{ width: 300, marginTop: 50 }}>\n            <Form.Item\n              name=\"email\"\n              rules={[{ required: true, message: '이메일을 입력해주세요!' }]}>\n              <Input\n                autoFocus\n                prefix={<MailOutlined />}\n                placeholder=\"Email\"\n                onChange={onChange}\n                name=\"email\"\n              />\n            </Form.Item>\n            <Form.Item\n              name=\"password\"\n              rules={[{ required: true, message: '패스워드를 입력해주세요!' }]}>\n              <Input\n                prefix={<LockOutlined />}\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Password\"\n                onChange={onChange}\n              />\n            </Form.Item>\n            <Form.Item>\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                style={{ width: '100%' }}\n                loading={loading}>\n                Log in\n              </Button>\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Login;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { changeField, login } from '../../redux/actions/auth';\nimport Login from '../../components/auth/Login';\nimport { RootState } from '../../redux/reducers';\nconst LoginContainer = () => {\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state: RootState) => state.loading);\n  const { email, password, user, authError } = useSelector(\n    (state: RootState) => state.auth\n  );\n\n  const history = useHistory();\n\n  const onLogin = useCallback(() => {\n    dispatch(login({ email, password }));\n  }, [dispatch, email, password]);\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { name, value } = e.target;\n      dispatch(\n        changeField({\n          key: name,\n          value,\n        })\n      );\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n      try {\n        localStorage.setItem('auth', JSON.stringify(user));\n      } catch (error) {\n        console.log('localStroage가 작동하지 않습니다!');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <Login\n      onLogin={onLogin}\n      onChange={onChange}\n      authError={authError}\n      loading={loading}\n    />\n  );\n};\n\nexport default LoginContainer;\n","import React from 'react';\nimport LoginContainer from '../containers/auth/LoginContainer';\n\nconst LoginPage = () => {\n  return <LoginContainer />;\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport {\n  Button,\n  Col,\n  DatePicker,\n  Descriptions,\n  Input,\n  PageHeader,\n  Row,\n  Select,\n  Space,\n} from 'antd';\nimport locale from 'antd/es/date-picker/locale/ko_KR';\nimport Form from 'antd/lib/form/Form';\n\ntype WriteProps = {\n  write: any;\n  imgUrl: string;\n  previewImg: string;\n  onSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\n  onCancel: () => void;\n  onChangeField: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSelect: (value: string) => void;\n  onDateChange: (date: moment.Moment | null, dateString: string) => void;\n  onFileChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  currentPostId: string | null;\n};\n\nconst Post = ({\n  write,\n  imgUrl,\n  previewImg,\n  onSubmit,\n  onCancel,\n  onChangeField,\n  onSelect,\n  onDateChange,\n  onFileChange,\n  currentPostId,\n}: WriteProps) => {\n  const { Option } = Select;\n  return (\n    <>\n      <Form onFinish={onSubmit}>\n        <Row justify=\"center\">\n          <Col xs={24} lg={14}>\n            <PageHeader\n              onBack={onCancel}\n              title={<Space>목업 {currentPostId ? '수정' : '등록'}</Space>}\n            />\n            <Descriptions layout=\"vertical\" bordered column={1}>\n              <Descriptions.Item label=\"이미지 등록\">\n                <figure\n                  style={{\n                    textAlign: 'center',\n                    maxWidth: '400px',\n                    margin: '0 auto',\n                  }}>\n                  <img\n                    src={currentPostId ? write.imgUrl : previewImg}\n                    alt=\"\"\n                    style={{ maxWidth: '100%' }}\n                  />\n                </figure>\n                {currentPostId ? (\n                  <Input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\n                ) : (\n                  <Input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={onFileChange}\n                    required\n                  />\n                )}\n              </Descriptions.Item>\n              <Descriptions.Item label=\"제목\">\n                <Input\n                  type=\"text\"\n                  name=\"title\"\n                  value={write.title}\n                  onChange={onChangeField}\n                  required\n                />\n              </Descriptions.Item>\n              <Descriptions.Item label=\"시안 종류\">\n                <Select\n                  defaultValue={\n                    currentPostId\n                      ? write.category\n                      : '시안 카테고리를 선택해주세요'\n                  }\n                  style={{ width: '100%' }}\n                  onChange={onSelect}>\n                  <Option value=\"brochure\">브로셔</Option>\n                  <Option value=\"catalogue\">카달로그</Option>\n                  <Option value=\"leaflet\">리플렛</Option>\n                  <Option value=\"etc\">기타</Option>\n                </Select>\n              </Descriptions.Item>\n              <Descriptions.Item label=\"작업자\">\n                <Input\n                  type=\"text\"\n                  name=\"manager\"\n                  onChange={onChangeField}\n                  value={write.manager}\n                  required\n                />\n              </Descriptions.Item>\n              <Descriptions.Item label=\"작업 날짜\">\n                <DatePicker\n                  picker=\"month\"\n                  locale={locale}\n                  onChange={onDateChange}\n                />\n              </Descriptions.Item>\n            </Descriptions>\n          </Col>\n        </Row>\n        <Row justify=\"center\" style={{ marginTop: '1rem' }}>\n          <Col>\n            <Button htmlType=\"submit\">등록</Button>\n            <Button onClick={onCancel} danger style={{ marginLeft: '0.5rem' }}>\n              취소\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default Post;\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  changeDate,\n  changeField,\n  changeFile,\n  changeSelect,\n  getDonwloadUrl,\n  updatePost,\n  writePost,\n} from '../../redux/actions/write';\nimport Write from '../../components/write/Write';\nimport { RootState } from '../../redux/reducers';\n\nconst WriteContainer = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    imgUrl,\n    title,\n    category,\n    manager,\n    date,\n    year,\n    month,\n    previewImg,\n    currentPostId,\n  } = useSelector((state: RootState) => state.write);\n  const { write } = useSelector((state: RootState) => state);\n\n  const onSubmit = useCallback(() => {\n    if (currentPostId) {\n      dispatch(\n        updatePost({\n          currentPostId,\n          imgUrl,\n          title,\n          category,\n          manager,\n          date,\n          year,\n          month,\n        })\n      );\n      window.alert('수정이 완료되었습니다.');\n    } else {\n      dispatch(\n        writePost({\n          imgUrl,\n          title,\n          category,\n          manager,\n          date,\n          year,\n          month,\n        })\n      );\n      window.alert('등록이 완료되었습니다.');\n    }\n\n    history.push('/');\n  }, [\n    dispatch,\n    imgUrl,\n    title,\n    category,\n    manager,\n    date,\n    year,\n    month,\n    history,\n    currentPostId,\n  ]);\n  const onCancel = () => {\n    history.goBack();\n  };\n  const onChangeField = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { value, name } = e.target;\n      dispatch(\n        changeField({\n          key: name,\n          value,\n        })\n      );\n    },\n    [dispatch]\n  );\n  const onSelect = useCallback(\n    (value) => {\n      dispatch(changeSelect(value));\n    },\n    [dispatch]\n  );\n\n  const onDateChange = useCallback(\n    (date, value) => {\n      dispatch(changeDate(value));\n    },\n    [dispatch]\n  );\n\n  const onFileChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { files } = e.target;\n      if (files) {\n        const file = files && files[0];\n        const fileReader = new FileReader();\n        let dataUrl;\n        fileReader.onloadend = (finishedEvent) => {\n          dataUrl = finishedEvent.target?.result;\n          dispatch(changeFile(dataUrl));\n        };\n        fileReader.readAsDataURL(file);\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    if (previewImg !== '') {\n      dispatch(getDonwloadUrl(previewImg));\n    }\n  }, [dispatch, previewImg]);\n\n  return (\n    <Write\n      write={write}\n      imgUrl={imgUrl}\n      previewImg={previewImg}\n      onSubmit={onSubmit}\n      onCancel={onCancel}\n      onChangeField={onChangeField}\n      onSelect={onSelect}\n      onDateChange={onDateChange}\n      onFileChange={onFileChange}\n      currentPostId={currentPostId}\n    />\n  );\n};\n\nexport default WriteContainer;\n","import React from 'react';\nimport WriteContainer from '../containers/write/WriteContainer';\n\nconst WritePage = () => {\n  return <WriteContainer />;\n};\n\nexport default WritePage;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route } from 'react-router-dom';\nimport { authService } from './api/apiConfig';\n\nimport DetailPage from './pages/DetailPage';\nimport Home from './pages/Home';\nimport ListPage from './pages/ListPage';\nimport LoginPage from './pages/LoginPage';\nimport WritePage from './pages/WritePage';\nimport { fetchUser, logout } from './redux/actions/auth';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        dispatch(fetchUser(user));\n      } else {\n        dispatch(logout());\n      }\n    });\n  }, [dispatch]);\n\n  return (\n    <>\n      <Route component={Home} path=\"/find-mokup\" exact />\n      <Route component={ListPage} path=\"/list\" />\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={WritePage} path=\"/write\" />\n      <Route component={DetailPage} path=\"/detail/:postId\" />\n    </>\n  );\n}\n\nexport default App;\n","import { AnyAction } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport {\n  POST_LIST_FAILURE,\n  POST_LIST_SUCCESS,\n  SELECT_SEARCH_FAILURE,\n  SELECT_SEARCH_SUCCESS,\n} from '../actions/postList';\nimport { CHANGE_SELECT } from '../actions/postList';\n\nconst initalState = {\n  postList: null,\n  error: null,\n  year: '',\n  category: '',\n  searchList: null,\n};\n\nconst postList = handleActions<any, AnyAction>(\n  {\n    [CHANGE_SELECT]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [POST_LIST_SUCCESS]: (state, { payload: postList }) => ({\n      ...state,\n      postList,\n    }),\n    [POST_LIST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [SELECT_SEARCH_SUCCESS]: (state, { payload: searchList }) => ({\n      ...state,\n      searchList,\n    }),\n    [SELECT_SEARCH_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initalState\n);\n\nexport default postList;\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING' as const;\nconst FINISH_LOADING = 'loading/FINISH_LOADING' as const;\n\nexport const startLoading = createAction(\n  START_LOADING,\n  (requestType: any) => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  (requestType: any) => requestType\n);\n\nconst initialState = {\n  loading: false,\n};\n\nconst loading = handleActions<any, any>(\n  {\n    [START_LOADING]: (state) => ({\n      ...state,\n      loading: true,\n    }),\n    [FINISH_LOADING]: (state) => ({\n      ...state,\n      loading: false,\n    }),\n  },\n  initialState\n);\n\nexport default loading;\n","import { handleActions } from 'redux-actions';\nimport {\n  READ_POST,\n  READ_POST_FAILURE,\n  READ_POST_SUCCESS,\n  RESET_POST,\n} from '../actions/post';\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions<any, any>(\n  {\n    [READ_POST]: (state) => ({\n      ...state,\n      post: null,\n      error: null,\n    }),\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post: {\n        ...post,\n        id: post.id,\n      },\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n\n    [RESET_POST]: () => initialState,\n  },\n  initialState\n);\n\nexport default post;\n","import { handleActions } from 'redux-actions';\nimport {\n  CHANGE_DATE,\n  CHANGE_FIELD,\n  CHANGE_FILE,\n  CHANGE_SELECT,\n  FORM_INIT,\n  GET_DOWNLOAD_URL,\n  GET_DOWNLOAD_URL_FAILURE,\n  GET_DOWNLOAD_URL_SUCCESS,\n  SET_CURRENT_POST,\n  UPDATE_POST_FAILURE,\n  UPDATE_POST_SUCCESS,\n  WRITE_POST,\n  WRITE_POST_FAILURE,\n  WRITE_POST_SUCCESS,\n} from '../actions/write';\nimport { MokupResType } from '../types/write';\n\nconst initialState: MokupResType = {\n  imgUrl: '',\n  category: '',\n  title: '',\n  manager: '',\n  date: '',\n  year: '',\n  month: '',\n  post: null,\n  postError: null,\n  previewImg: '',\n  getUrlError: null,\n  currentPostId: null,\n};\n\nconst write = handleActions<MokupResType, any>(\n  {\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [CHANGE_SELECT]: (state, { payload: { value } }) => ({\n      ...state,\n      category: value,\n    }),\n    [CHANGE_DATE]: (state, { payload: { value } }) => ({\n      ...state,\n      date: value,\n      year: value.substring(0, 4),\n      month: value.substring(5),\n    }),\n    [CHANGE_FILE]: (state, { payload: { value } }) => ({\n      ...state,\n      previewImg: value,\n    }),\n    [WRITE_POST]: (state) => ({\n      ...state,\n      post: null,\n      postError: null,\n    }),\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [WRITE_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      postError: error,\n    }),\n    [GET_DOWNLOAD_URL]: (state) => ({\n      ...state,\n      getUrlError: null,\n    }),\n    [GET_DOWNLOAD_URL_SUCCESS]: (state, { payload: value }) => ({\n      ...state,\n      imgUrl: value,\n    }),\n\n    [GET_DOWNLOAD_URL_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      getUrlError: error,\n    }),\n    [SET_CURRENT_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      category: post.category,\n      currentPostId: post.id,\n      date: post.date,\n      imgUrl: post.imgUrl,\n      manager: post.manager,\n      year: post.year,\n      month: post.month,\n      previewImg: post.previewImg,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [FORM_INIT]: (state) => ({\n      ...state,\n      title: '',\n      category: '',\n      currentPostId: null,\n      date: '',\n      imgUrl: '',\n      manager: '',\n      year: '',\n      month: '',\n      previewImg: '',\n    }),\n  },\n  initialState\n);\n\nexport default write;\n","import { handleActions } from 'redux-actions';\nimport {\n  CHANGE_FIELD,\n  FETCH_USER,\n  LOGIN_CHECK,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  LOGOUT,\n} from '../actions/auth';\nimport { AuthStateType } from '../types/auth';\n\nconst initialState: AuthStateType = {\n  email: '',\n  password: '',\n  user: null,\n  authError: null,\n};\n\nconst auth = handleActions<AuthStateType, any>(\n  {\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value,\n    }),\n    [LOGIN_SUCCESS]: (state, { payload: authUser }) => ({\n      ...state,\n      authError: null,\n    }),\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error,\n    }),\n    [LOGOUT]: (state) => ({\n      ...state,\n      user: null,\n    }),\n    [FETCH_USER]: (state, { payload: user }) => ({\n      ...state,\n      user: {\n        id: user.uid,\n        email: user.email,\n      },\n    }),\n    [LOGIN_CHECK]: (state) => ({ ...state }),\n  },\n  initialState\n);\n\nexport default auth;\n","import { combineReducers } from 'redux';\nimport postList from './postList';\nimport loading from '../../lib/loading';\nimport post from './post';\nimport write from './write';\nimport auth from './auth';\n\nconst rootReducer = combineReducers({\n  auth,\n  write,\n  post,\n  loading,\n  postList,\n});\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { AnyAction } from 'redux';\nimport { call, put } from 'redux-saga/effects';\nimport { finishLoading, startLoading } from './loading';\n\nexport default function createRequestSaga(type: string, request: any) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function* (action: AnyAction) {\n    yield put(startLoading(type));\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response,\n      });\n    } catch (error) {\n      yield put({\n        type: FAILURE,\n        payload: error,\n        error: true,\n      });\n    }\n\n    yield put(finishLoading(type));\n  };\n}\n","import { AuthType } from '../redux/types/auth';\nimport { authService } from './apiConfig';\n\nexport const login = async ({ email, password }: AuthType) => {\n  const response = await authService.signInWithEmailAndPassword(\n    email,\n    password\n  );\n  return response;\n};\n\nexport const logout = () => {\n  authService.signOut();\n};\n","import { LOGIN, LOGOUT } from '../actions/auth';\nimport createRequestSaga from '../../lib/createRequestSaga';\nimport * as authAPI from '../../api/authApi';\nimport { call, takeLatest } from 'redux-saga/effects';\n\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nfunction* logoutSaga() {\n  try {\n    localStorage.removeItem('auth');\n    yield call(authAPI.logout);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport function* authSaga() {\n  yield takeLatest(LOGIN, loginSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n","import * as postAPI from '../../api/postApi';\nimport { READ_POST } from '../actions/post';\nimport createRequestSaga from '../../lib/createRequestSaga';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst readPostSaga = createRequestSaga(READ_POST, postAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n","import { POST_LIST, SELECT_SEARCH } from '../actions/postList';\nimport createRequestSaga from '../../lib/createRequestSaga';\nimport * as postAPI from '../../api/postApi';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst getPostListSaga = createRequestSaga(POST_LIST, postAPI.getListPost);\nconst selectSearchSaga = createRequestSaga(\n  SELECT_SEARCH,\n  postAPI.selectSearchListPost\n);\nexport function* postListSaga() {\n  yield takeLatest(POST_LIST, getPostListSaga);\n  yield takeLatest(SELECT_SEARCH, selectSearchSaga);\n}\n","import { GET_DOWNLOAD_URL, UPDATE_POST, WRITE_POST } from '../actions/write';\nimport createRequestSaga from '../../lib/createRequestSaga';\nimport * as postAPI from '../../api/postApi';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst writeWorkSaga = createRequestSaga(WRITE_POST, postAPI.writeWork);\nconst getDownloadUrlSaga = createRequestSaga(\n  GET_DOWNLOAD_URL,\n  postAPI.storageWork\n);\nconst updateWorkSaga = createRequestSaga(UPDATE_POST, postAPI.updateWork);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writeWorkSaga);\n  yield takeLatest(GET_DOWNLOAD_URL, getDownloadUrlSaga);\n  yield takeLatest(UPDATE_POST, updateWorkSaga);\n}\n","import { all } from 'redux-saga/effects';\nimport { authSaga } from './auth';\nimport { postSaga } from './post';\nimport { postListSaga } from './postList';\nimport { writeSaga } from './write';\n\nexport function* rootSaga() {\n  yield all([writeSaga(), postSaga(), postListSaga(), authSaga()]);\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../redux/reducers';\nimport { rootSaga } from '../redux/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware))\n);\n\nfunction loadAuth() {\n  try {\n    const auth = localStorage.getItem('auth');\n    if (!auth) return;\n  } catch (error) {\n    console.log('localStorage가 작동하지 않습니다!');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadAuth();\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/storeConfig';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}